/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// tests/main.test.ts
var main_test_exports = {};
__export(main_test_exports, {
  default: () => DiscordFormatter
});
module.exports = __toCommonJS(main_test_exports);
var import_obsidian2 = require("obsidian");

// src/utils.ts
var CouldNotParseError = class extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, CouldNotParseError.prototype);
  }
};
var EmptyMessageError = class extends Error {
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, EmptyMessageError.prototype);
  }
};
function parseMessageText(messageContentElems) {
  const textRuns = [];
  for (const elem of Array.from(messageContentElems)) {
    if (/^emojiContainer/.test(elem.className)) {
      const imgElem = elem.children[0];
      if (!imgElem) {
        throw new CouldNotParseError("parseMessageText: No img element found in span.emojiContainer");
      }
      if (/^:.+:$/.test(imgElem.alt)) {
        textRuns.push({ type: "customEmoji", content: imgElem.src });
      } else {
        textRuns.push({ type: "emoji", content: imgElem.alt });
      }
      continue;
    }
    let textContent = elem.textContent;
    if (!textContent) {
      throw new CouldNotParseError("parseMessageText: Message run contains neither text content nor emoji");
    }
    textContent = textContent.replace("\n", "\n>");
    switch (elem.nodeName) {
      case "EM": {
        textRuns.push({ type: "italics", content: textContent });
        break;
      }
      case "STRONG": {
        textRuns.push({ type: "bold", content: textContent });
        break;
      }
      case "U": {
        textRuns.push({ type: "underline", content: textContent });
        break;
      }
      case "S": {
        textRuns.push({ type: "strikethrough", content: textContent });
        break;
      }
      case "H1": {
        textRuns.push({ type: "h1", content: textContent });
        break;
      }
      case "H2": {
        textRuns.push({ type: "h2", content: textContent });
        break;
      }
      case "H3": {
        textRuns.push({ type: "h3", content: textContent });
        break;
      }
      case "TIME": {
        textRuns.push({ type: "edited", content: elem.dateTime });
        break;
      }
      default: {
        if (/blockquote/.test(elem.className)) {
          textRuns.push({ type: "quote", content: textContent });
        } else {
          textRuns.push({ type: "default", content: textContent });
        }
      }
    }
  }
  return textRuns;
}
function parseMessageAttachments(messageAccessoryElem) {
  if (messageAccessoryElem.nodeName != "DIV" || !/message-accessories/.test(messageAccessoryElem.id)) {
    throw new CouldNotParseError('messageAccessoryElem not <div id="message-accessories...">');
  }
  const messageAccessoryImages = Array.from(messageAccessoryElem.querySelectorAll("img"));
  return messageAccessoryImages.map((img) => {
    return img.src;
  });
}
function textRunsToMarkdown(textRuns, formats2) {
  const markdownArray = [];
  for (const run of textRuns) {
    const markdown = formats2[run.type](run.content);
    markdownArray.push(markdown);
  }
  return markdownArray.join("");
}

// src/AbstractDiscordMessage.ts
var AbstractDiscordMessage = class {
  constructor(MESSAGE_LI) {
  }
};

// src/DiscordMessageReply.ts
var DiscordMessageReply = class extends AbstractDiscordMessage {
  constructor(REPLY_DIV) {
    super(REPLY_DIV);
    if (!/^message-reply-context/.test(REPLY_DIV.id)) {
      console.error(REPLY_DIV);
      throw new CouldNotParseError(`Expected <div id="message-reply-context...">`);
    }
    this.header = this.constructMessageHeader(REPLY_DIV);
    this.content = this.constructMessageContent(REPLY_DIV);
  }
  constructMessageContent(REPLY_DIV) {
    const messageContentElems = this.getMessageTextElems(REPLY_DIV);
    if (!messageContentElems) {
      console.error(REPLY_DIV);
      throw new EmptyMessageError(`Message contains no text content`);
    }
    return { textRuns: parseMessageText(messageContentElems) };
  }
  getMessageTextElems(REPLY_DIV) {
    var _a;
    return (_a = REPLY_DIV.querySelector("div[id^='message-content']")) == null ? void 0 : _a.children;
  }
  constructMessageHeader(REPLY_DIV) {
    var _a;
    const nickname = (_a = REPLY_DIV.querySelector("[class^='username-']")) == null ? void 0 : _a.textContent;
    if (!nickname) {
      console.error(REPLY_DIV);
      throw new CouldNotParseError(`Expected a <span class='username-'> in div, but querySelector couldn't locate one`);
    }
    return { nickname };
  }
  toMarkdown(formats2) {
    let textRunMarkdown = textRunsToMarkdown(this.content.textRuns, formats2);
    textRunMarkdown = textRunMarkdown.replace("\n", "\n>>");
    console.log("????");
    const replyMarkdown = formats2["reply"](textRunMarkdown, this.header.nickname);
    return formats2["reply"](replyMarkdown, this.header.nickname);
  }
};

// src/DiscordMessage.ts
var AbstractDiscordMessage2 = class {
  constructor(MESSAGE_LI) {
  }
};
var DiscordMessage = class extends AbstractDiscordMessage2 {
  constructor(MESSAGE_LI) {
    var _a;
    super(MESSAGE_LI);
    if (!((_a = MESSAGE_LI.firstElementChild) == null ? void 0 : _a.innerHTML)) {
      throw new EmptyMessageError("<li> seems to be empty");
    }
    try {
      this.header = this.constructMessageHeader(MESSAGE_LI);
    } catch (error) {
      if (!(error instanceof CouldNotParseError)) {
        throw error;
      }
    }
    this.content = this.constructMessageContent(MESSAGE_LI);
  }
  constructMessageHeader(MESSAGE_LI) {
    var _a, _b, _c;
    const headerDiv = MESSAGE_LI.querySelector("h3[class^='header']");
    if (!headerDiv) {
      throw new CouldNotParseError(`No <h3 class='header...'> found`);
    }
    const nickname = (_a = headerDiv.querySelector("span[class^='username']")) == null ? void 0 : _a.textContent;
    if (!nickname) {
      throw new CouldNotParseError(`Message Header exists, but could not find nickname`);
    }
    const timeExact = (_b = headerDiv.querySelector("time")) == null ? void 0 : _b.dateTime;
    let timeRelative = (_c = headerDiv.querySelector("time")) == null ? void 0 : _c.textContent;
    if (!(timeExact && timeRelative)) {
      throw new CouldNotParseError(`Message Header exists, but could not find time`);
    } else {
      const regexTimeRelative = /â€” (.*)/.exec(timeRelative);
      if (!(regexTimeRelative && regexTimeRelative.length == 2)) {
        throw new CouldNotParseError("Relative time could not be parsed from Regex");
      }
      timeRelative = regexTimeRelative[1];
    }
    const avatarDiv = MESSAGE_LI.querySelector("img[class^='avatar']");
    let avatarUrl = void 0;
    if (avatarDiv) {
      avatarUrl = avatarDiv.src;
    }
    const messageReplyDiv = MESSAGE_LI.querySelector("div[id^='message-reply'");
    let messageReply = void 0;
    if (messageReplyDiv) {
      messageReply = new DiscordMessageReply(messageReplyDiv);
    }
    const header = {
      nickname,
      timeExact: Date.parse(timeExact),
      timeRelative
    };
    if (avatarUrl)
      header.avatar = avatarUrl;
    if (messageReply)
      header.reply = messageReply;
    return header;
  }
  constructMessageContent(MESSAGE_LI) {
    const messageTextElems = this.getMessageTextElems(MESSAGE_LI);
    const messageAttachmentElem = MESSAGE_LI.querySelector("div[id^='message-accessories']");
    if (!messageTextElems && !messageAttachmentElem) {
      throw new EmptyMessageError(`Message contains neither text content nor attachments`);
    }
    const content = {};
    if (messageTextElems) {
      content.textRuns = parseMessageText(messageTextElems);
    }
    if (messageAttachmentElem) {
      content.attachments = parseMessageAttachments(messageAttachmentElem);
    }
    return content;
  }
  getMessageTextElems(MESSAGE_LI) {
    var _a;
    return (_a = MESSAGE_LI.querySelector("div[class^='contents'] > div[id^='message-content']")) == null ? void 0 : _a.children;
  }
  toMarkdown(formats2) {
    const markdownArray = [];
    if (this.header) {
      const date = new Date(this.header.timeExact);
      markdownArray.push(
        `**${this.header.nickname} - ${date.toLocaleString()}**`
      );
      if (this.header.reply) {
        markdownArray.push(this.header.reply.toMarkdown(formats2));
      }
    }
    if (this.content.textRuns) {
      markdownArray.push(textRunsToMarkdown(this.content.textRuns, formats2));
    }
    if (this.content.attachments) {
      for (const url of this.content.attachments) {
        markdownArray.push(`![](${url})`);
      }
    }
    return ">" + markdownArray.join("\n>");
  }
};

// src/DiscordSingleMessage.ts
var DiscordSingleMessage = class extends DiscordMessage {
  constructor(messageDiv) {
    super(messageDiv);
  }
  getMessageTextElems(messageDiv) {
    var _a;
    return (_a = messageDiv.querySelector("div[id^='message-content']")) == null ? void 0 : _a.children;
  }
};

// src/DiscordConversation.ts
var DiscordConversation = class {
  constructor(DOM, formats2) {
    if (!this.isDiscordPaste(DOM)) {
      throw new CouldNotParseError("Paste doesn't appear to be from Discord");
    }
    this.messages = this.createMessages(DOM, formats2);
  }
  static fromRawHTML(HTML, formats2) {
    const parser = new DOMParser();
    const DOM = parser.parseFromString(HTML, "text/html");
    return new this(DOM, formats2);
  }
  createMessages(DOM, formats2) {
    const discordMessages = [];
    const domOfMessages = Array.from(DOM.querySelectorAll("li"));
    if (domOfMessages.length > 0) {
      for (const message of domOfMessages) {
        try {
          discordMessages.push(new DiscordMessage(message));
        } catch (err) {
          if (!(err instanceof EmptyMessageError)) {
            throw err;
          } else {
            continue;
          }
        }
      }
    } else {
      discordMessages.push(new DiscordSingleMessage(DOM.body));
    }
    return discordMessages;
  }
  isDiscordPaste(DOM) {
    const messageContentElem = DOM.querySelector("div[id^='message-content']");
    if (messageContentElem) {
      if (!/message-content-\d{19}/.test(messageContentElem.id)) {
        console.error("isDiscordPaste FAIL: No <div id='message-content-\\d{19}'");
        return false;
      }
      if (!/markup-[\w\d]{6}/.test(messageContentElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='markup-\\w{6}'");
        return false;
      }
      if (!/messageContent-[\w\d]{6}/.test(messageContentElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='messageContent-\\w{6}'");
        return false;
      }
      return true;
    }
    const messageAccesoriesElem = DOM.querySelector("div[id^='message-accessories']");
    if (messageAccesoriesElem) {
      if (!/message-accessories-\d{19}/.test(messageAccesoriesElem.id)) {
        console.error("isDiscordPaste FAIL: No <div id='message-accessories-\\d{19}'");
        return false;
      }
      if (!/container-[\w\d]{6}/.test(messageAccesoriesElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='container-\\w{6}'");
        return false;
      }
      return true;
    }
    return false;
  }
  toMarkdown(formats2) {
    const markdownArray = [];
    for (const message of this.messages) {
      if (message.header && markdownArray.length > 0) {
        markdownArray.push(">");
      }
      markdownArray.push(message.toMarkdown(formats2));
    }
    return markdownArray.join("\n");
  }
};

// src/settings.ts
var import_obsidian = require("obsidian");
var SettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show Replies").setDesc("If there's a message reply, paste the message that's been replied to.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showReplies).onChange(async (value) => {
        this.plugin.settings.showReplies = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Distinguish Headings").setDesc("Use a different markdown for each heading level.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.distinguishHeadings).onChange(async (value) => {
        this.plugin.settings.distinguishHeadings = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Show (edited)").setDesc("Copy the *(edited)* mark to Obsidian.").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.showEdited).onChange(async (value) => {
        this.plugin.settings.showEdited = value;
        await this.plugin.saveSettings();
      });
    });
  }
};

// src/formats.ts
var formats = {
  reply: {
    // showReply toggle
    enabled: (replyText, nickname) => {
      return `>**${nickname}**: ${replyText}`;
    },
    disabled: (replyText, nickname) => {
      return "";
    }
  },
  edited: {
    // showEdited toggle
    enabled: () => {
      return " *(edited)*";
    },
    disabled: () => {
      return "";
    }
  },
  italics: (content) => {
    return `*${content}*`;
  },
  bold: (content) => {
    return `**${content}**`;
  },
  underline: (content) => {
    return `<u>${content}</u>`;
  },
  strikethrough: (content) => {
    return `~~${content}~~`;
  },
  quote: (content) => {
    return `>${content}`;
  },
  undistinguishedHeading: (content) => {
    return addNewLine(`**${content}**`);
  },
  h1: (content) => {
    return addNewLine(`**--- ${content} ---**`);
  },
  h2: (content) => {
    return addNewLine(`**--${content}--**`);
  },
  h3: (content) => {
    return addNewLine(`**-${content}-**`);
  },
  default: (content) => {
    return content;
  },
  // content without particular formatting
  emoji: (content) => {
    return content;
  },
  customEmoji: (content) => {
    return `<img src='${content}' style='height: var(--font-text-size)'>`;
  }
};
function addNewLine(content) {
  return content + "\n>";
}
function createFormats(settings) {
  let h1Format;
  let h2Format;
  let h3Format;
  if (settings.distinguishHeadings === false) {
    h1Format = formats.undistinguishedHeading;
    h2Format = formats.undistinguishedHeading;
    h3Format = formats.undistinguishedHeading;
  } else {
    h1Format = formats.h1;
    h2Format = formats.h2;
    h3Format = formats.h3;
  }
  let editedFormat;
  if (settings.showEdited === true) {
    editedFormat = formats.edited.enabled;
  } else {
    editedFormat = formats.edited.disabled;
  }
  let replyFormat;
  if (settings.showReplies === true) {
    replyFormat = formats.reply.enabled;
  } else {
    replyFormat = formats.reply.disabled;
  }
  return {
    reply: replyFormat,
    edited: editedFormat,
    italics: formats.italics,
    bold: formats.bold,
    underline: formats.underline,
    strikethrough: formats.strikethrough,
    quote: formats.quote,
    h1: h1Format,
    h2: h2Format,
    h3: h3Format,
    default: formats.default,
    emoji: formats.emoji,
    customEmoji: formats.customEmoji
  };
}

// tests/tests.ts
var fs = __toESM(require("fs"));
function assertEqual(outputValue, assertionValue, name) {
  if (outputValue instanceof Object && assertionValue instanceof Object) {
    if (JSON.stringify(outputValue) != JSON.stringify(assertionValue)) {
      console.error(
        `FAIL: ${name}
Output Object: `,
        outputValue,
        `
Assertion Object: `,
        assertionValue
      );
    } else {
      console.log(`PASS: ${name}`);
    }
  } else if (typeof outputValue == "string" && typeof assertionValue == "string") {
    if (outputValue != assertionValue) {
      console.error(
        `FAIL: ${name}
Output string: `,
        outputValue,
        `
Assertion string: `,
        assertionValue
      );
    } else {
      console.log(`PASS: ${name}`);
    }
  }
}
var Tests = class {
  constructor() {
    this.DIR = "/home/dude/Sync/dev vault/.obsidian/plugins/discord-message-formatter/tests/";
  }
  run(formats2) {
    console.log("--- TEST START ---");
    this.runMessageTests(formats2);
    this.runConversationTests(formats2);
    this.runSingleMessageTests(formats2);
  }
  runMessageTests(formats2) {
    const TESTOBJECTS = [
      {
        fileName: "one_with_header_and_pfp.html",
        object: { "header": { "nickname": "Hunter Biden's laptop", "timeExact": 1689992946294, "timeRelative": "Today at 04:29", "avatar": "https://cdn.discordapp.com/avatars/197517944425676802/988fca0e8f445ce54c9dd2600ec7bc35.webp?size=80" }, "context": { "channelId": "557327188311932959", "messageId": "1132137215611379812" }, "content": { "text": "Dangerous disease" } },
        markdown: ">**Hunter Biden's laptop - 7/22/2023, 4:29:06 AM**\n>Dangerous disease"
      },
      {
        fileName: "one_with_header.html",
        object: { "header": { "nickname": "Hunter Biden's laptop", "timeExact": 1689997530951, "timeRelative": "Today at 05:45" }, "context": { "channelId": "557327188311932959", "messageId": "1132156445056569395" }, "content": { "text": "true" } },
        markdown: ">**Hunter Biden's laptop - 7/22/2023, 5:45:30 AM**\n>true"
      }
    ];
    for (const { fileName, object, markdown } of TESTOBJECTS) {
      fs.readFile(this.DIR + fileName, "utf8", (err, data) => {
        if (err) {
          console.error(err);
          return;
        }
        const parser = new DOMParser();
        const DOM = parser.parseFromString(data, "text/html");
        const firstLi = DOM.querySelector("li");
        const message = new DiscordMessage(firstLi);
        assertEqual(message, object, "DiscordMessage Object equality: " + fileName);
        assertEqual(message.toMarkdown(formats2), markdown, "DiscordMessage.toMarkdown() equality: " + fileName);
      });
    }
  }
  runConversationTests(formats2) {
    const TESTOBJECTS = [
      {
        fileName: "multiple_with_header.html",
        object: { "messages": [{ "header": { "nickname": "Herr", "timeExact": 1690650011630, "timeRelative": "Today at 19:00" }, "context": { "channelId": "840286264964022302", "messageId": "1134893147378425957" }, "content": { "text": "The issue happens when I try to compile the file manually using tsc tests/UnitTests.ts *(edited)*" } }, { "context": { "channelId": "840286264964022302", "messageId": "1134893348440776704" }, "content": { "text": "However, I kinda feel like I have to because npm run dev doesn't seem to compile tests/UnitTests.ts to a tests/UnitTests.js like it does with all other .ts files? *(edited)*" } }, { "context": { "channelId": "840286264964022302", "messageId": "1134893757297344572" }, "content": { "text": "Guess it doesn't matter since it responds to changes to the UnitTests.ts regardless..." } }] },
        markdown: `>**Herr - 7/29/2023, 7:00:11 PM**
>The issue happens when I try to compile the file manually using tsc tests/UnitTests.ts *(edited)*
>However, I kinda feel like I have to because npm run dev doesn't seem to compile tests/UnitTests.ts to a tests/UnitTests.js like it does with all other .ts files? *(edited)*
>Guess it doesn't matter since it responds to changes to the UnitTests.ts regardless...`
      },
      {
        fileName: "multiple_with_pfp.html",
        object: { "messages": [{ "header": { "nickname": "Gigachad Xi", "timeExact": 1689963536254, "timeRelative": "Yesterday at 20:18", "avatar": "https://cdn.discordapp.com/avatars/165944997215076353/432fa5303fb36b8fd126c7178cf70d4c.webp?size=80" }, "context": { "channelId": "557327188311932959", "messageId": "1132013860962975744" }, "content": { "text": "Oppenheimer" } }, { "context": { "channelId": "557327188311932959", "messageId": "1132013881879973978" }, "content": { "text": "Is a solid 7/8" } }] },
        markdown: ">**Gigachad Xi - 7/21/2023, 8:18:56 PM**\n>Oppenheimer\n>Is a solid 7/8"
      },
      {
        fileName: "multiple_from_several_users.html",
        object: { "messages": [{ "header": { "nickname": "Gigachad Xi", "timeExact": 1689963536254, "timeRelative": "Yesterday at 20:18", "avatar": "https://cdn.discordapp.com/avatars/165944997215076353/432fa5303fb36b8fd126c7178cf70d4c.webp?size=80" }, "context": { "channelId": "557327188311932959", "messageId": "1132013860962975744" }, "content": { "text": "Oppenheimer" } }, { "context": { "channelId": "557327188311932959", "messageId": "1132013881879973978" }, "content": { "text": "Is a solid 7/8" } }, { "header": { "nickname": "Luke", "timeExact": 1689964049113, "timeRelative": "Yesterday at 20:27", "avatar": "https://cdn.discordapp.com/avatars/595791333705121804/7b13474c06f4e459c33364597146b822.webp?size=80" }, "context": { "channelId": "557327188311932959", "messageId": "1132016012049531012" }, "content": { "text": "mooi tota vittu oisko poistaa jotai akuuttii nippii tai jotai mukkulan hepatiittirotta syyhki temestat vittu laika vaik piuhal taj jotai. philisp mankka kajari akuutti 15min tori s\xE4\xE4t\xF6 tos ni saan siit jotain ni voin sit maksaa, en laita tilil mit\xE4\xE4 kuumottaa vitusti sossut ja edunvalvonta yms ulosoton takia ni koodaile jotai jos mit\xE4\xE4 buddhaa tms ois poistaa palaillaa sit mo" } }, { "header": { "nickname": "Gigachad Xi", "timeExact": 1689964153722, "timeRelative": "Yesterday at 20:29", "avatar": "https://cdn.discordapp.com/avatars/165944997215076353/432fa5303fb36b8fd126c7178cf70d4c.webp?size=80" }, "context": { "channelId": "557327188311932959", "messageId": "1132016450811461694" }, "content": { "text": "The movie is about physics law and Japan" } }] },
        markdown: ">**Gigachad Xi - 7/21/2023, 8:18:56 PM**\n>Oppenheimer\n>Is a solid 7/8\n>\n>**Luke - 7/21/2023, 8:27:29 PM**\n>mooi tota vittu oisko poistaa jotai akuuttii nippii tai jotai mukkulan hepatiittirotta syyhki temestat vittu laika vaik piuhal taj jotai. philisp mankka kajari akuutti 15min tori s\xE4\xE4t\xF6 tos ni saan siit jotain ni voin sit maksaa, en laita tilil mit\xE4\xE4 kuumottaa vitusti sossut ja edunvalvonta yms ulosoton takia ni koodaile jotai jos mit\xE4\xE4 buddhaa tms ois poistaa palaillaa sit mo\n>\n>**Gigachad Xi - 7/21/2023, 8:29:13 PM**\n>The movie is about physics law and Japan"
      },
      {
        fileName: "multiple_with_reply.html",
        object: { "messages": [{ "header": { "nickname": "bird", "timeExact": 1691022210439, "timeRelative": "Today at 02:23" }, "context": { "channelId": "931852793277476894", "messageId": "1136454262331822130" }, "content": { "text": "I love germany but has to be like among the least drippiest euro countries out there" } }, { "context": { "channelId": "931852793277476894", "messageId": "1136454712170921994" }, "content": { "text": "And its music so bad" } }, { "header": { "nickname": "Matthaeus", "timeExact": 1691022398376, "timeRelative": "Today at 02:26", "avatar": "https://cdn.discordapp.com/avatars/197517944425676802/988fca0e8f445ce54c9dd2600ec7bc35.webp?size=80", "reply": { "header": { "nickname": "@bird" }, "context": { "messageId": "1136454712170921994" }, "content": { "text": "And its music so bad" } } }, "context": { "channelId": "931852793277476894", "messageId": "1136455050596732929" }, "content": { "text": "Lot of good German techno music though" } }] },
        markdown: ">**bird - 8/3/2023, 2:23:30 AM**\n>I love germany but has to be like among the least drippiest euro countries out there\n>And its music so bad\n>\n>**Matthaeus - 8/3/2023, 2:26:38 AM**\n>>**@bird**: And its music so bad\n>Lot of good German techno music though"
      },
      {
        fileName: "single_with_formatting.html",
        object: { "messages": [{ "header": { "nickname": "Herr", "timeExact": 1691526039341, "timeRelative": "08/08/2023 22:20" }, "context": { "channelId": "138567305459142796", "messageId": "1138567473910796310" }, "content": { "text": "normal *italics* **bold** <u>underline</u> ~~strikethrough~~\n>**HEADING 1**\n>**HEADING 2**\n>**HEADING 3**\n>>quote\n> *(edited)*" } }] },
        markdown: ">**Herr - 8/8/2023, 10:20:39 PM**\n>normal *italics* **bold** <u>underline</u> ~~strikethrough~~\n>**HEADING 1**\n>**HEADING 2**\n>**HEADING 3**\n>>quote\n> *(edited)*"
      },
      {
        fileName: "single_with_unicode_emojis.html",
        object: { "messages": [{ "header": { "nickname": "Herr", "timeExact": 1692649260204, "timeRelative": "Today at 22:21" }, "context": { "channelId": "114327860366934837" }, "content": { "text": "\u{1F34B} \u{1F346} \u{1F1E9}\u{1F1EA}" } }] },
        markdown: `>**Herr - 8/21/2023, 10:21:00 PM**
>\u{1F34B} \u{1F346} \u{1F1E9}\u{1F1EA}`
      },
      {
        fileName: "single_with_custom_emojis.html",
        object: { "messages": [{ "header": { "nickname": "Herr", "timeExact": 1692649260204, "timeRelative": "Today at 22:21" }, "context": { "channelId": "114327860366934837" }, "content": { "text": "<img src='https://cdn.discordapp.com/emojis/289470315942248448.webp?size=96&quality=lossless' style='height: var(--font-text-size)'>" } }] },
        markdown: `>**Herr - 8/21/2023, 10:21:00 PM**
><img src='https://cdn.discordapp.com/emojis/289470315942248448.webp?size=96&quality=lossless' style='height: var(--font-text-size)'>`
      },
      {
        fileName: "several_with_attachments.html",
        object: { "messages": [{ "header": { "nickname": "Herr", "timeExact": 1692655959816, "timeRelative": "Today at 00:12" }, "context": { "channelId": "138567305459142796", "messageId": "1143306703878766633" }, "content": { "text": "hello world *(edited)*" } }, { "context": { "channelId": "138567305459142796", "messageId": "1143307020049584188" }, "content": { "text": "abacaba" } }, { "header": { "nickname": "Herr", "timeExact": 1692657247448, "timeRelative": "Today at 00:34", "avatar": "https://cdn.discordapp.com/avatars/132166096286515200/d094d931f04b153aaaeb736c7f9718e9.webp?size=80" }, "context": { "channelId": "138567305459142796", "messageId": "1143312104598810689" }, "content": { "text": "accompanying message text", "attachments": ["https://media.discordapp.net/attachments/1138567305459142796/1143312104103870516/Herr_portrait_of_weird_worm_person_69c468d8-c741-4728-96ab-b8016fff0a2d_1.png?width=273&height=273", "https://media.discordapp.net/attachments/1138567305459142796/1143312104556875816/Herr_weird_creepy_worm_person_cd6e3e60-3e2a-4a11-b21e-d076f9c7317b.png?width=273&height=273"] } }, { "header": { "nickname": "Herr", "timeExact": 1692659735873, "timeRelative": "Today at 01:15", "avatar": "https://cdn.discordapp.com/avatars/132166096286515200/d094d931f04b153aaaeb736c7f9718e9.webp?size=80" }, "context": { "channelId": "138567305459142796", "messageId": "1143322541809750056" }, "content": { "attachments": ["https://media.discordapp.net/attachments/1138567305459142796/1143322540970872902/catjam.gif"] } }] },
        markdown: `>**Herr - 8/22/2023, 12:12:39 AM**
>hello world *(edited)*
>abacaba
>
>**Herr - 8/22/2023, 12:34:07 AM**
>accompanying message text
>![](https://media.discordapp.net/attachments/1138567305459142796/1143312104103870516/Herr_portrait_of_weird_worm_person_69c468d8-c741-4728-96ab-b8016fff0a2d_1.png?width=273&height=273)
>![](https://media.discordapp.net/attachments/1138567305459142796/1143312104556875816/Herr_weird_creepy_worm_person_cd6e3e60-3e2a-4a11-b21e-d076f9c7317b.png?width=273&height=273)
>
>**Herr - 8/22/2023, 1:15:35 AM**
>![](https://media.discordapp.net/attachments/1138567305459142796/1143322540970872902/catjam.gif)`
      }
    ];
    for (const { fileName, object, markdown } of TESTOBJECTS) {
      fs.readFile(this.DIR + fileName, "utf8", (err, data) => {
        if (err) {
          console.error(err);
          return;
        }
        const conversation = DiscordConversation.fromRawHTML(data, formats2);
        assertEqual(conversation, object, "DiscordConversation Object equality: " + fileName);
        assertEqual(conversation.toMarkdown(formats2), markdown, "DiscordConversation.toMarkdown() equality: " + fileName);
      });
    }
  }
  runSingleMessageTests(formats2) {
    const TESTOBJECTS = [
      {
        fileName: "single.html",
        object: { "header": { "nickname": "Herr", "timeExact": 1691526039341, "timeRelative": "Today at 22:20" }, "context": { "channelId": "113856747391079631" }, "content": { "text": "normal *italics* **bold** <u>underline</u> ~~strikethrough~~\n>**HEADING**\n>" } },
        markdown: `>**Herr - 8/8/2023, 10:20:39 PM**
>normal *italics* **bold** <u>underline</u> ~~strikethrough~~
>**HEADING**
>`
      },
      {
        fileName: "single_with_unicode_emojis.html",
        object: { "header": { "nickname": "Herr", "timeExact": 1692649260204, "timeRelative": "Today at 22:21" }, "context": { "channelId": "114327860366934837" }, "content": { "text": "\u{1F34B} \u{1F346} \u{1F1E9}\u{1F1EA}" } },
        markdown: `>**Herr - 8/21/2023, 10:21:00 PM**
>\u{1F34B} \u{1F346} \u{1F1E9}\u{1F1EA}`
      },
      {
        fileName: "single_with_attachments_and_text.html",
        object: { "header": { "nickname": "Herr", "timeExact": 1692657247448, "timeRelative": "Today at 00:34" }, "context": { "channelId": "114331210459881068" }, "content": { "text": "accompanying message text", "attachments": ["https://media.discordapp.net/attachments/1138567305459142796/1143312104103870516/Herr_portrait_of_weird_worm_person_69c468d8-c741-4728-96ab-b8016fff0a2d_1.png?width=273&height=273", "https://media.discordapp.net/attachments/1138567305459142796/1143312104556875816/Herr_weird_creepy_worm_person_cd6e3e60-3e2a-4a11-b21e-d076f9c7317b.png?width=273&height=273"] } },
        markdown: `>**Herr - 8/22/2023, 12:34:07 AM**
>accompanying message text
>![](https://media.discordapp.net/attachments/1138567305459142796/1143312104103870516/Herr_portrait_of_weird_worm_person_69c468d8-c741-4728-96ab-b8016fff0a2d_1.png?width=273&height=273)
>![](https://media.discordapp.net/attachments/1138567305459142796/1143312104556875816/Herr_weird_creepy_worm_person_cd6e3e60-3e2a-4a11-b21e-d076f9c7317b.png?width=273&height=273)`
      },
      {
        fileName: "single_with_only_attachment.html",
        object: { "header": { "nickname": "Herr", "timeExact": 1692659735873, "timeRelative": "Today at 01:15" }, "context": { "channelId": "114332254180975005" }, "content": { "attachments": ["https://media.discordapp.net/attachments/1138567305459142796/1143322540970872902/catjam.gif"] } },
        markdown: `>**Herr - 8/22/2023, 1:15:35 AM**
>![](https://media.discordapp.net/attachments/1138567305459142796/1143322540970872902/catjam.gif)`
      }
    ];
    for (const { fileName, object, markdown } of TESTOBJECTS) {
      fs.readFile(this.DIR + fileName, "utf8", (err, data) => {
        if (err) {
          console.error(err);
          return;
        }
        const parser = new DOMParser();
        const DOM = parser.parseFromString(data, "text/html");
        const singleMessage = new DiscordSingleMessage(DOM.body);
        assertEqual(singleMessage, object, "SingleMessage Object equality: " + fileName);
        assertEqual(singleMessage.toMarkdown(formats2), markdown, "SingleMessage.toMarkdown() equality: " + fileName);
      });
    }
  }
};
var tests_default = new Tests();

// tests/main.test.ts
var fs2 = __toESM(require("fs"));
var DEFAULT_SETTINGS = {
  showEdited: true,
  showReplies: true,
  distinguishHeadings: false
};
var DiscordFormatter = class extends import_obsidian2.Plugin {
  // Test
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingsTab(this.app, this));
    this.pasteMessageHandler = this.pasteMessage.bind(this);
    this.app.workspace.on("editor-paste", this.pasteMessageHandler);
    this.writeClipboardHandler = this.writeClipboardToFile.bind(this);
    this.app.workspace.on("editor-paste", this.writeClipboardHandler);
    this.addCommand({
      id: "run-unit-tests",
      name: "Debug: Run Unit Tests",
      callback: () => {
        tests_default.run(this.formats);
      }
    });
  }
  onunload() {
    this.app.workspace.off("editor-paste", this.pasteMessageHandler);
    this.app.workspace.off("editor-paste", this.writeClipboardHandler);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    this.formats = createFormats(this.settings);
  }
  async saveSettings() {
    this.saveData(this.settings);
    this.formats = createFormats(this.settings);
  }
  pasteMessage(event) {
    var _a, _b, _c;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (!(view == null ? void 0 : view.editor)) {
      return;
    }
    let conversation = void 0;
    if ((_a = event.clipboardData) == null ? void 0 : _a.getData("text/html")) {
      const rawHTML = (_b = event.clipboardData) == null ? void 0 : _b.getData("text/html");
      conversation = DiscordConversation.fromRawHTML(rawHTML, this.formats);
    } else if ((_c = event.clipboardData) == null ? void 0 : _c.getData("text")) {
    }
    if (conversation && (conversation == null ? void 0 : conversation.messages.length) > 0) {
      event.preventDefault();
      view.editor.replaceSelection(conversation.toMarkdown(this.formats));
    }
  }
  writeClipboardToFile(event) {
    var _a, _b;
    let string = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/html");
    if (!string) {
      string = (_b = event.clipboardData) == null ? void 0 : _b.getData("text");
    }
    if (!string) {
      return;
    }
    for (let i = 0; i < 30; i++) {
      if (!fs2.existsSync(`${i}.html`)) {
        console.log(`Wrote to ~/${i}.html`);
        fs2.writeFile(`${i}.html`, string, () => {
        });
        return;
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
