import * as fs from 'fs';
import { SETTINGS } from 'main';
export function writeDocumentToFile(doc) {
    // Save document to a file
    var serializer = new XMLSerializer();
    var str = serializer.serializeToString(doc);
    for (var i = 0; i < 30; i++) {
        if (!fs.existsSync("~/Documents/".concat(i, ".html"))) {
            fs.writeFile("~/Documents/".concat(i, ".html"), str, function () { });
            return;
        }
    }
}
export function writeStringToFile(str) {
    if (typeof str == "undefined") {
        log("string undefined");
        return;
    }
    for (var i = 0; i < 30; i++) {
        if (!fs.existsSync("".concat(i, ".html"))) {
            fs.writeFile("".concat(i, ".html"), str, function () { });
            return;
        }
    }
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function log() {
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        params[_i] = arguments[_i];
    }
    if (SETTINGS.debug) {
        console.log.apply(console, params);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ1dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2hDLE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxHQUFhO0lBQzdDLDBCQUEwQjtJQUUxQixJQUFNLFVBQVUsR0FBRyxJQUFJLGFBQWEsRUFBRSxDQUFDO0lBQ3ZDLElBQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUU5QyxLQUFJLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFDO1FBQ3JCLElBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHNCQUFlLENBQUMsVUFBTyxDQUFDLEVBQUM7WUFDdkMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxzQkFBZSxDQUFDLFVBQU8sRUFBRSxHQUFHLEVBQUUsY0FBTyxDQUFDLENBQUMsQ0FBQztZQUNyRCxPQUFPO1NBQ1Y7S0FDSjtBQUNMLENBQUM7QUFFRCxNQUFNLFVBQVUsaUJBQWlCLENBQUMsR0FBdUI7SUFDckQsSUFBRyxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUM7UUFDekIsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUE7UUFDdkIsT0FBTztLQUNWO0lBRUQsS0FBSSxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBQztRQUNyQixJQUFHLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFHLENBQUMsVUFBTyxDQUFDLEVBQUM7WUFDM0IsRUFBRSxDQUFDLFNBQVMsQ0FBQyxVQUFHLENBQUMsVUFBTyxFQUFFLEdBQUcsRUFBRSxjQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE9BQU87U0FDVjtLQUNKO0FBQ0wsQ0FBQztBQUdELDhEQUE4RDtBQUM5RCxNQUFNLFVBQVUsR0FBRztJQUFDLGdCQUFnQjtTQUFoQixVQUFnQixFQUFoQixxQkFBZ0IsRUFBaEIsSUFBZ0I7UUFBaEIsMkJBQWdCOztJQUNuQyxJQUFHLFFBQVEsQ0FBQyxLQUFLLEVBQUM7UUFDWCxPQUFPLENBQUMsR0FBRyxPQUFYLE9BQU8sRUFBUSxNQUFNLEVBQUU7S0FDN0I7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuXG5pbXBvcnQgeyBTRVRUSU5HUyB9IGZyb20gJ21haW4nO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZURvY3VtZW50VG9GaWxlKGRvYzogRG9jdW1lbnQpOiB2b2lkIHtcbiAgICAvLyBTYXZlIGRvY3VtZW50IHRvIGEgZmlsZVxuXG4gICAgY29uc3Qgc2VyaWFsaXplciA9IG5ldyBYTUxTZXJpYWxpemVyKCk7XG4gICAgY29uc3Qgc3RyID0gc2VyaWFsaXplci5zZXJpYWxpemVUb1N0cmluZyhkb2MpO1xuXG4gICAgZm9yKGxldCBpPTA7IGkgPCAzMDsgaSsrKXtcbiAgICAgICAgaWYoIWZzLmV4aXN0c1N5bmMoYH4vRG9jdW1lbnRzLyR7aX0uaHRtbGApKXtcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZShgfi9Eb2N1bWVudHMvJHtpfS5odG1sYCwgc3RyLCAoKSA9PiB7fSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVN0cmluZ1RvRmlsZShzdHI6IHN0cmluZyB8IHVuZGVmaW5lZCl7XG4gICAgaWYodHlwZW9mIHN0ciA9PSBcInVuZGVmaW5lZFwiKXtcbiAgICAgICAgbG9nKFwic3RyaW5nIHVuZGVmaW5lZFwiKVxuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yKGxldCBpPTA7IGkgPCAzMDsgaSsrKXtcbiAgICAgICAgaWYoIWZzLmV4aXN0c1N5bmMoYCR7aX0uaHRtbGApKXtcbiAgICAgICAgICAgIGZzLndyaXRlRmlsZShgJHtpfS5odG1sYCwgc3RyLCAoKSA9PiB7fSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmV4cG9ydCBmdW5jdGlvbiBsb2coLi4ucGFyYW1zOiBhbnlbXSk6IHZvaWR7XG5cdGlmKFNFVFRJTkdTLmRlYnVnKXtcbiAgICAgICAgY29uc29sZS5sb2coLi4ucGFyYW1zKTtcblx0fVxufSJdfQ==