/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DiscordFormatter
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");

// src/types.ts
var EmptyMessageError = class extends Error {
  // Thrown when an <li> is empty of message content; empty <li>'s are common when 
  // copy-pasting discord messages. Meant to be caught by DiscordConversation.
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, EmptyMessageError.prototype);
  }
};
var CouldNotParseError = class extends Error {
  // Thrown in DiscordMessage or DiscordConversation when unexpected HTML is encountenred
  constructor(message) {
    super(message);
    Object.setPrototypeOf(this, CouldNotParseError.prototype);
  }
};

// src/DiscordMessageReply.ts
var DiscordMessageReply = class {
  constructor(replyDiv) {
    var _a, _b;
    if (!/^message-reply-context/.test(replyDiv.id)) {
      console.error(replyDiv);
      throw new CouldNotParseError(`Expected <div id="message-reply-context...">`);
    }
    const nickname = (_a = replyDiv.querySelector("[class^='username-']")) == null ? void 0 : _a.textContent;
    if (!nickname) {
      console.error(replyDiv);
      throw new CouldNotParseError(`Expected a <span class='username-'> in div, but querySelector couldn't locate one`);
    }
    this.header = { nickname };
    const messageContentDiv = replyDiv.querySelector("[id^='message-content'");
    if (!messageContentDiv) {
      console.error(replyDiv);
      throw new CouldNotParseError(`Expectected a <span id='message-content-...'> in div, but querySelector couldn't locate one`);
    }
    const regexMessageId = /message-content-(\d{19})/.exec(messageContentDiv.id);
    if (regexMessageId && regexMessageId.length == 2) {
      this.context = { messageId: regexMessageId[1] };
    } else {
      console.error(replyDiv);
      throw new CouldNotParseError(`Could not find messageId`);
    }
    const messageContentElems = (_b = replyDiv.querySelector("div[id^='message-content']")) == null ? void 0 : _b.children;
    if (!messageContentElems) {
      console.error(replyDiv);
      throw new EmptyMessageError(`Message contains no text content`);
    }
    this.content = { text: DiscordMessage.parseMessageText(messageContentElems) };
  }
  toMarkdown() {
    return `>**${this.header.nickname}**: ${this.content.text}`;
  }
};

// src/DiscordMessage.ts
var DiscordMessage = class {
  constructor(MESSAGE_LI) {
    var _a;
    if (!((_a = MESSAGE_LI.firstElementChild) == null ? void 0 : _a.innerHTML)) {
      throw new EmptyMessageError("<li> seems to be empty");
    }
    try {
      this.constructMessageHeader(MESSAGE_LI);
    } catch (error) {
      if (!(error instanceof CouldNotParseError)) {
        throw error;
      }
    }
    this.constructMessageContext(MESSAGE_LI);
    this.constructMessageContent(MESSAGE_LI);
  }
  constructMessageHeader(MESSAGE_LI) {
    var _a, _b, _c;
    const headerDiv = MESSAGE_LI.querySelector("h3[class^='header']");
    if (!headerDiv) {
      throw new CouldNotParseError(`No <h3 class='header...'> found`);
    }
    const nickname = (_a = headerDiv.querySelector("span[class^='username']")) == null ? void 0 : _a.textContent;
    if (!nickname) {
      throw new CouldNotParseError(`Message Header exists, but could not find nickname`);
    }
    const timeExact = (_b = headerDiv.querySelector("time")) == null ? void 0 : _b.dateTime;
    let timeRelative = (_c = headerDiv.querySelector("time")) == null ? void 0 : _c.textContent;
    if (!(timeExact && timeRelative)) {
      throw new CouldNotParseError(`Message Header exists, but could not find time`);
    } else {
      const regexTimeRelative = /â€” (.*)/.exec(timeRelative);
      if (!(regexTimeRelative && regexTimeRelative.length == 2)) {
        throw new CouldNotParseError("Relative time could not be parsed from Regex");
      }
      timeRelative = regexTimeRelative[1];
    }
    const avatarDiv = MESSAGE_LI.querySelector("img[class^='avatar']");
    let avatarUrl = void 0;
    if (avatarDiv) {
      avatarUrl = avatarDiv.src;
    }
    const messageReplyDiv = MESSAGE_LI.querySelector("div[id^='message-reply'");
    let messageReply = void 0;
    if (messageReplyDiv) {
      messageReply = new DiscordMessageReply(messageReplyDiv);
    }
    const header = {
      nickname,
      timeExact: Date.parse(timeExact),
      timeRelative
    };
    if (avatarUrl)
      header.avatar = avatarUrl;
    if (messageReply)
      header.reply = messageReply;
    this.header = header;
  }
  constructMessageContent(MESSAGE_LI) {
    const messageTextElems = this.getMessageTextElems(MESSAGE_LI);
    const messageAttachmentElem = MESSAGE_LI.querySelector("div[id^='message-accessories']");
    if (!messageTextElems && !messageAttachmentElem) {
      throw new EmptyMessageError(`Message contains neither text content nor attachments`);
    }
    this.content = {};
    if (messageTextElems) {
      this.content.text = DiscordMessage.parseMessageText(messageTextElems);
    }
    if (messageAttachmentElem) {
      this.content.attachments = this.parseMessageAttachments(messageAttachmentElem);
    }
  }
  getMessageTextElems(MESSAGE_LI) {
    var _a;
    return (_a = MESSAGE_LI.querySelector("div[class^='contents'] > div[id^='message-content']")) == null ? void 0 : _a.children;
  }
  static parseMessageText(messageContentElems) {
    const message = [];
    for (const elem of Array.from(messageContentElems)) {
      let textContent = elem.textContent;
      if (!textContent) {
        if (/^emojiContainer/.test(elem.className)) {
          const imgElem = elem.children[0];
          if (!imgElem) {
            console.error("No img element found in span.emojiContainer");
          }
          if (/^:.+:$/.test(imgElem.alt)) {
            message.push(`<img src='${imgElem.src}' style='height: var(--font-text-size)'>`);
          } else {
            message.push(`${imgElem.alt}`);
          }
        }
        continue;
      }
      textContent = textContent.replace("\n", "\n>");
      switch (elem.nodeName) {
        case "EM": {
          message.push(`*${textContent}*`);
          break;
        }
        case "STRONG": {
          message.push(`**${textContent}**`);
          break;
        }
        case "U": {
          message.push(`<u>${textContent}</u>`);
          break;
        }
        case "S": {
          message.push(`~~${textContent}~~`);
          break;
        }
        case "H1": {
          message.push(`**${textContent}**
>`);
          break;
        }
        case "H2": {
          message.push(`**${textContent}**
>`);
          break;
        }
        case "H3": {
          message.push(`**${textContent}**
>`);
          break;
        }
        default: {
          if (/^blockquote/.test(elem.className)) {
            message.push(`>${textContent}`);
          } else if (/^timestamp/.test(elem.className)) {
            message.push(` *(edited)*`);
          } else {
            message.push(textContent);
          }
        }
      }
    }
    return message.join("");
  }
  parseMessageAttachments(messageAccessoryElem) {
    const messageAccessoryImages = Array.from(messageAccessoryElem.querySelectorAll("img"));
    return messageAccessoryImages.map((img) => {
      return img.src;
    });
  }
  constructMessageContext(MESSAGE_LI) {
    const IdRegex = /(\d{18})-(\d{19})/.exec(MESSAGE_LI.id);
    if (!(IdRegex && IdRegex.length == 3)) {
      console.log(MESSAGE_LI);
      throw new CouldNotParseError("messageId and serverId not found in <li> id");
    }
    this.context = {
      channelId: IdRegex[1],
      messageId: IdRegex[2]
    };
  }
  toMarkdown() {
    const markdownArray = [];
    if (this.header) {
      const date = new Date(this.header.timeExact);
      markdownArray.push(
        `**${this.header.nickname} - ${date.toLocaleString()}**`
      );
      if (this.header.reply) {
        markdownArray.push(this.header.reply.toMarkdown());
      }
    }
    if (this.content.text) {
      markdownArray.push(this.content.text);
    }
    if (this.content.attachments) {
      for (const url of this.content.attachments) {
        markdownArray.push(`![](${url})`);
      }
    }
    return ">" + markdownArray.join("\n>");
  }
};

// src/DiscordSingleMessage.ts
var DiscordSingleMessage = class extends DiscordMessage {
  constructor(messageDiv) {
    super(messageDiv);
  }
  getMessageTextElems(messageDiv) {
    var _a;
    return (_a = messageDiv.querySelector("div[id^='message-content']")) == null ? void 0 : _a.children;
  }
  constructMessageContext(messageDiv) {
    const messageContentElem = messageDiv.querySelector("div[id^='message-content']");
    const messageAccessoryElem = messageDiv.querySelector("div[id^='message-accessories']");
    if (!messageContentElem && !messageAccessoryElem) {
      throw new CouldNotParseError("No div#message-content nor div#message-accessories could be found.");
    }
    const channelIdRegex = /\d{18}/;
    let regexResult = void 0;
    if (messageContentElem) {
      regexResult = channelIdRegex.exec(messageContentElem.id);
    } else if (messageAccessoryElem) {
      regexResult = channelIdRegex.exec(messageAccessoryElem.id);
    }
    if (!(regexResult && regexResult.length == 1)) {
      throw new CouldNotParseError("Could not parse channel id from message-content div");
    }
    this.context = {
      channelId: regexResult[0]
    };
  }
};

// src/DiscordConversation.ts
var DiscordConversation = class {
  constructor(DOM) {
    if (!this.isDiscordPaste(DOM)) {
      throw new CouldNotParseError("Paste doesn't appear to be from Discord");
    }
    this.messages = this.createMessages(DOM);
  }
  static fromRawHTML(HTML) {
    const parser = new DOMParser();
    const DOM = parser.parseFromString(HTML, "text/html");
    return new this(DOM);
  }
  createMessages(DOM) {
    const discordMessages = [];
    const domOfMessages = Array.from(DOM.querySelectorAll("li"));
    if (domOfMessages.length > 0) {
      for (const message of domOfMessages) {
        try {
          discordMessages.push(new DiscordMessage(message));
        } catch (err) {
          if (!(err instanceof EmptyMessageError)) {
            throw err;
          } else {
            continue;
          }
        }
      }
    } else {
      discordMessages.push(new DiscordSingleMessage(DOM.body));
    }
    return discordMessages;
  }
  isDiscordPaste(DOM) {
    const messageContentElem = DOM.querySelector("div[id^='message-content']");
    if (messageContentElem) {
      if (!/message-content-\d{19}/.test(messageContentElem.id)) {
        console.error("isDiscordPaste FAIL: No <div id='message-content-\\d{19}'");
        return false;
      }
      if (!/markup-[\w\d]{6}/.test(messageContentElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='markup-\\w{6}'");
        return false;
      }
      if (!/messageContent-[\w\d]{6}/.test(messageContentElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='messageContent-\\w{6}'");
        return false;
      }
      return true;
    }
    const messageAccesoriesElem = DOM.querySelector("div[id^='message-accessories']");
    if (messageAccesoriesElem) {
      if (!/message-accessories-\d{19}/.test(messageAccesoriesElem.id)) {
        console.error("isDiscordPaste FAIL: No <div id='message-accessories-\\d{19}'");
        return false;
      }
      if (!/container-[\w\d]{6}/.test(messageAccesoriesElem.className)) {
        console.error("isDiscordPaste FAIL: No <div class='container-\\w{6}'");
        return false;
      }
      return true;
    }
    return false;
  }
  toMarkdown() {
    const markdownArray = [];
    for (const message of this.messages) {
      if (message.header && markdownArray.length > 0) {
        markdownArray.push(">");
      }
      markdownArray.push(message.toMarkdown());
    }
    return markdownArray.join("\n");
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {};
var DiscordFormatter = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.pasteMessageHandler = this.pasteMessage.bind(this);
    this.app.workspace.on("editor-paste", this.pasteMessageHandler);
  }
  onunload() {
    this.app.workspace.off("editor-paste", this.pasteMessageHandler);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    this.saveData(this.settings);
  }
  pasteMessage(event) {
    var _a;
    const rawHTML = (_a = event.clipboardData) == null ? void 0 : _a.getData("text/html");
    const view = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!(rawHTML && (view == null ? void 0 : view.editor))) {
      return;
    }
    const conversation = DiscordConversation.fromRawHTML(rawHTML);
    if (conversation.messages.length == 0) {
      return;
    }
    event.preventDefault();
    view.editor.replaceSelection(conversation.toMarkdown());
  }
};
//# sourceMappingURL=data:application/json;base64,
